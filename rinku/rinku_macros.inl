
#define UNREACHABLE__ assert(false && "UNREACHABLE");

#define RINKU_INPUT(SIGNAL, N)				\
  struct SIGNAL: Rinku::Impl::Input_<N, SIGNAL> {	\
    static constexpr char const *Name = #SIGNAL;	\
  };

#define RINKU_OUTPUT(SIGNAL, N)				\
  struct SIGNAL: Rinku::Impl::Output_<N, SIGNAL> {	\
    static constexpr char const *Name = #SIGNAL;	\
  };

#define RINKU_SIGNAL_LIST(NAME, ...) using NAME = Rinku::Impl::Signals_< __VA_ARGS__ >;
#define RINKU_MODULE(...) public Rinku::Module< __VA_ARGS__ >
#define RINKU_ON_CLOCK_RISING() virtual void clockRising() override
#define RINKU_ON_CLOCK_FALLING() virtual void clockFalling() override
#define RINKU_UPDATE() virtual void update([[maybe_unused]] GuaranteeToken guarantee_no_get_input) override
#define RINKU_GUARANTEE_NO_GET_INPUT() guarantee_no_get_input.set();
#define RINKU_RESET() virtual void reset() override
#define RINKU_NOT(SIGNAL) Rinku::Not<SIGNAL>

#define RINKU_PP_GET_3RD(_1, _2, _3, NAME, ...) NAME
#define RINKU_PP_GET_2ND(_1, _2, NAME, ...) NAME

#define RINKU_SYSTEM_HALT2(HLT_SIGNAL, MODULE)	connectHalt<HLT_SIGNAL>(MODULE)
#define RINKU_SYSTEM_HALT3(SYSTEM, HLT_SIGNAL, MODULE)(SYSTEM).connectHalt<HLT_SIGNAL>(MODULE)
#define RINKU_SYSTEM_HALT(...)			\
  RINKU_PP_GET_3RD(__VA_ARGS__,			\
		   RINKU_SYSTEM_HALT3,		\
		   RINKU_SYSTEM_HALT2)		\
  (__VA_ARGS__)

#define RINKU_SYSTEM_ERROR2(ERR_SIGNAL, MODULE)	connectError<ERR_SIGNAL>(MODULE)
#define RINKU_SYSTEM_ERROR3(SYSTEM, ERR_SIGNAL, MODULE)	(SYSTEM).connectError<ERR_SIGNAL>(MODULE)
#define RINKU_SYSTEM_ERROR(...)			\
  RINKU_PP_GET_3RD(__VA_ARGS__,			\
		   RINKU_SYSTEM_ERROR3,		\
		   RINKU_SYSTEM_ERROR2)		\
  (__VA_ARGS__)

#define RINKU_SYSTEM_EXIT2(EXIT_SIGNAL, MODULE)	connectExit<EXIT_SIGNAL>(MODULE)
#define RINKU_SYSTEM_EXIT3(SYSTEM, EXIT_SIGNAL, MODULE)	(SYSTEM).connectExit<EXIT_SIGNAL>(MODULE)
#define RINKU_SYSTEM_EXIT(...)	       \
  RINKU_PP_GET_3RD(__VA_ARGS__,	       \
		   RINKU_SYSTEM_EXIT3, \
		   RINKU_SYSTEM_EXIT2) \
  (__VA_ARGS__)

#define RINKU_SYSTEM_EXIT_CODE2(EXIT_CODE_SIGNAL, MODULE) connectExitCode<EXIT_CODE_SIGNAL>(MODULE)
#define RINKU_SYSTEM_EXIT_CODE3(SYSTEM, EXIT_CODE_SIGNAL, MODULE) (SYSTEM).connectExitCode<EXIT_CODE_SIGNAL>(MODULE)
#define RINKU_SYSTEM_EXIT_CODE(...)		\
  RINKU_PP_GET_3RD(__VA_ARGS__,			\
		   RINKU_SYSTEM_EXIT_CODE3,	\
		   RINKU_SYSTEM_EXIT_CODE2)	\
  (__VA_ARGS__)


#define RINKU_ADD_MODULE1(MODULE_TYPE) addModule<MODULE_TYPE>
#define RINKU_ADD_MODULE2(SYSTEM, MODULE_TYPE) (SYSTEM).addModule<MODULE_TYPE>
#define RINKU_ADD_MODULE(...)	      \
  RINKU_PP_GET_2ND(__VA_ARGS__,	      \
		   RINKU_ADD_MODULE2, \
		   RINKU_ADD_MODULE1) \
    (__VA_ARGS__)

#define RINKU_CONNECT_MOD(INPUT_OBJECT, INPUT_SIGNAL, OUTPUT_OBJECT, OUTPUT_SIGNAL) \
  (INPUT_OBJECT).connect<INPUT_SIGNAL, OUTPUT_SIGNAL>((OUTPUT_OBJECT))

#define RINKU_CONNECT_CONST(INPUT_OBJECT, INPUT_SIGNAL, VALUE)	\
  (INPUT_OBJECT).connect<INPUT_SIGNAL, VALUE>()

#define RINKU_GET_OUTPUT(OUTPUT_SIGNAL) getOutput<OUTPUT_SIGNAL>()
#define RINKU_GET_OUTPUT_INDEX(INDEX) getOutput((INDEX))			
#define RINKU_SET_OUTPUT(OUTPUT_SIGNAL, VALUE) setOutput<OUTPUT_SIGNAL>((VALUE))
#define RINKU_SET_OUTPUT_INDEX(INDEX, VALUE) setOutput((INDEX), (VALUE))
#define RINKU_GET_INPUT(INPUT_SIGNAL) getInput<INPUT_SIGNAL>()
#define RINKU_GET_INPUT_INDEX(INDEX) getInput((INDEX))


#ifdef RINKU_REMOVE_MACRO_PREFIX
#define INPUT RINKU_INPUT
#define OUTPUT RINKU_OUTPUT
#define SIGNAL_LIST RINKU_SIGNAL_LIST
#define MODULE RINKU_MODULE
#define ON_CLOCK_RISING RINKU_ON_CLOCK_RISING 
#define ON_CLOCK_FALLING RINKU_ON_CLOCK_FALLING
#define UPDATE RINKU_UPDATE
#define RESET RINKU_RESET
#define NOT RINKU_NOT
#define ADD_MODULE RINKU_ADD_MODULE
#define SYSTEM_HALT RINKU_SYSTEM_HALT
#define SYSTEM_ERROR RINKU_SYSTEM_ERROR
#define SYSTEM_EXIT RINKU_SYSTEM_EXIT
#define CONNECT_MOD RINKU_CONNECT_MOD
#define CONNECT_CONST RINKU_CONNECT_CONST
#define GET_OUTPUT RINKU_GET_OUTPUT
#define GET_OUTPUT_INDEX RINKU_GET_OUTPUT_INDEX
#define SET_OUTPUT RINKU_SET_OUTPUT
#define SET_OUTPUT_INDEX RINKU_SET_OUTPUT_INDEX
#define GET_INPUT RINKU_GET_INPUT
#define GET_INPUT_INDEX RINKU_GET_INPUT_INDEX
#define GUARANTEE_NO_GET_INPUT RINKU_GUARANTEE_NO_GET_INPUT
#endif
